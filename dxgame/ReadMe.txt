========================================================================
    CONSOLE APPLICATION : dxgame Project Overview
========================================================================

This was originally generated by the VS AppWizard.

Some files:

dxgame.vcxproj
    This is the main project file for VC++ projects generated using an Application Wizard.
    It contains information about the version of Visual C++ that generated the file, and
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

dxgame.vcxproj.filters
    This is the filters file for VC++ projects generated using an Application Wizard. 
    It contains information about the association between the files in your project 
    and the filters. This association is used in the IDE to show grouping of files with
    similar extensions under a specific node (for e.g. ".cpp" files are associated with the
    "Source Files" filter).
    
actor.cpp
    A CompoundMesh and its transformations. Essentially, this is a single instance of an object in the game world.
    
chronometer.cpp
    A simple timer.
    
complexmesh.cpp
    Not used. Loads complex model into single vertex buffer which seems impractical for anything complex, ironically.
    
compoundmesh.cpp
    Models are loaded here.

dsfmt.c
    Well-known SIMD-optimized Mersenne Twister implementation, for later.

dxgame.cpp
    This is the main application source file. It actually contains _tmain() and the code
    to create a window, unless it's been refactored.

d3dclass.cpp
    This file contains code to intialize D3D and retains the ID3D11Device and ID3D11DeviceContext pointers.
    It's a modified version of the rastertek.com tutorial file.

errors.cpp
    This is a collection of helper functions to display error message boxes.
    
firstperson.cpp
    This ia a camera, including transforms input handling.
    
graphics.cpp
    This class is the graphics engine, basically. It initializes d3dclass and some other necessary structures.

input.cpp
    Input encapsulation.
    
intermediaterendertarget.cpp
    This is an off-screen texture to be used as a render target. This can be copied to the screen via 
    the postprocessing shader for some effects.

lightsandshadows.cpp
    Light positions, related constant buffers. 

loadedtexture.cpp
    This class holds a texture buffer loaded with WICTextureLoader, nothing fancy. 
    DDSTextureLoader may be trivially substituted.

modelmanager.cpp
    This is a collection of ComplexModel objects. It's the cache of loaded models, really.

objloader.cpp
    This is a .obj loader that I ported from grilliards; it was originally from an OpenGL tutorial.

options.cpp
    Runtime-configurable options.

scene.cpp
    This is a collection of Actor objects which may be rendered as a set.

scenedemo.cpp
    This is a scene with a house, a duck, a floor, a torus, a tree, and a human model. It's mainly for testing.

scriptedactor.cpp
    Lua hooks for Actor (TODO)
    
scriptedscene.cpp
    Lua hooks for Scene (TODO)
    
shadowbuffer.cpp
    Holds the actual buffer for a single shadowmap. Rendering code is in LightsAndShadows.

simplemesh.cpp
    Another port from grilliards. I modified to use xnamath and render itself with D3D. DirectX rendering code
    is again modified from the rastertek tutorials. The xnamath knowledge is from Frank Luna's book.

SimpleText.cpp
    A wrapper for a decent library to draw text.
    
Sound.cpp
    A wrapper for FMOD; nothing complicated yet.

vanillashaders.cpp
    Heavily modified rastertek.com file to hold compiled shader references and some of the constant buffers that feed them.
    
vboindexer.cpp
    Another grilliards source file ported from glm to xnamath. Not sure if useful.
    
vertex.h
    The Vertex struct. I see no reason not to have it in its own header; it's used all over the place.
    
WICTextureLoader.cpp
    This is from Microsoft.

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named dxgame.pch and a precompiled types file named StdAfx.obj.

/////////////////////////////////////////////////////////////////////////////


art notes:
http://insurrectionx.deviantart.com/art/damask-wallpaper-85958835

TODO:
done: Refactor texture minder.
done: Normal maps.
done: Specular maps?
done: Shadow maps!
done: Actor, Scene
works: Lua hooks, Lua control of actors?
Game state
Environment maps? static or dynamic?
Level generator?
3D sound... actually make use of FMOD
Use bulletphysics library?
Do the things.

/////////////////////////////////////////////////////////////////////////////
Skeletal animation notes:

aiScene may have a number of animations -- usually 1 apparently with different actions comprising discrete frame ranges therein
an animation has multiple channels, each one corresponding to a bone
a channel has separate arrays of rotations, translations, and scaling factors... but often only rotations

for ease of rendering, each bone/channel shall be assigned an index number
rotations, translations, scalings will be stored in a 3D array (texture) with X being animation time in ticks, Y being bone index, Z being data type (rotation = 0, translation = 1, scaling = 2)

each vertex has shall have four bone weights with indexes
It should be possible to implement interpolation using a texture sampler... perhaps. It may be necessary to pad the last frame of each animation range with the first frame of each range @_@.
XXX can I even use textures in a vertex shader?